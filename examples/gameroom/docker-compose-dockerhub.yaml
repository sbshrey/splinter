# Copyright 2020 Cargill Incorporated
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version: "3.7"

volumes:
  cargo-registry:
  registry:
  acme-var:
  bubba-var:
  acme-db:
  bubba-db:

services:

    generate-registry:
        image: splintercommunity/splinter-cli:master
        volumes:
          - registry:/registry
        command: |
          bash -c "
            if [ ! -f /registry/nodes.yaml ]
            then
              # generate keys
              splinter admin keygen alice -d /registry
              splinter admin keygen bob -d /registry
              # check if splinterd-node-acme is available
              while [[ $$(curl --write-out %{http_code} --silent --output /dev/null http://splinterd-node-acme:8085/status) -ne 200 ]] ; do
                 >&2 echo \"splinterd is unavailable - sleeping\"
                 sleep 1
              done
              # check if splinterd-node-bubba is available
              while [[ $$(curl --write-out %{http_code} --silent --output /dev/null http://splinterd-node-bubba:8085/status) -ne 200 ]] ; do
                 >&2 echo \"splinterd is unavailable - sleeping\"
                 sleep 1
              done
              # build the registry
              splinter registry build \
                http://splinterd-node-acme:8085 \
                --file /registry/nodes.yaml \
                --key-file /registry/alice.pub \
                --metadata organization='ACME Corporation'
              splinter registry build \
                http://splinterd-node-bubba:8085 \
                --file /registry/nodes.yaml \
                --key-file /registry/bob.pub \
                --metadata organization='Bubba Bakery'
            fi
          "

    registry-server:
      image: httpd:2.4
      container_name: registry-server
      restart: always
      expose:
        - 80
      ports:
          - "8099:80"
      volumes:
        - registry:/usr/local/apache2/htdocs

    db-acme:
      image: splintercommunity/supplychain-database:master
      container_name: db-acme
      restart: always
      expose:
        - 5432
      ports:
          - "5432:5432"
      environment:
        POSTGRES_USER: supplychain
        POSTGRES_PASSWORD: supplychain_example
        POSTGRES_DB: supplychain
      volumes:
        - "./database/tables:/docker-entrypoint-initdb.d"
        - acme-db:/var/lib/postgresql/data/

    supplychain-app-acme:
      image: splintercommunity/supplychain-app-acme:master
      container_name: supplychain-app-acme
      environment:
        - VUE_APP_BRAND=acme
      expose:
        - 80
      ports:
        - '8080:80'

    supplychaind-acme:
        image: splintercommunity/supplychaind:master
        container_name: supplychaind-acme
        volumes:
          - cargo-registry:/root/.cargo/registry
        expose:
          - 8000
        ports:
          - "8000:8000"
        depends_on:
          - splinterd-node-acme
        command: |
          bash -c "
            # we need to wait for the db to have started.
            until PGPASSWORD=supplychain_example psql -h db-acme -U supplychain -c '\q'; do
                >&2 echo \"Database is unavailable - sleeping\"
                sleep 1
            done

            # check if splinterd-node-acme is available
            while [[ $$(curl --write-out %{http_code} --silent --output /dev/null http://splinterd-node-acme:8085/status) -ne 200 ]] ; do
               >&2 echo \"splinterd is unavailable - sleeping\"
               sleep 1
            done

            supplychain -vv database migrate --database-url postgres://supplychain:supplychain_example@db-acme:5432/supplychain &&
            supplychaind -vv --database-url postgres://supplychain:supplychain_example@db-acme:5432/supplychain \
              -b supplychaind-acme:8000 --splinterd-url http://splinterd-node-acme:8085
          "

    splinterd-node-acme:
      image: splintercommunity/splinterd:master
      container_name: splinterd-node-acme
      expose:
        - 8080
        - 8044
        - 8945
        - 8085
      ports:
        - 8088:8085
      volumes:
        - acme-var:/var/lib/splinter
        - ./splinterd-config:/configs
      entrypoint: |
        bash -c "
          splinter cert generate --skip && \
          splinterd -c ./configs/splinterd-node-acme.toml -vv \
              --service-endpoint tcp://0.0.0.0:8043 \
              --network-endpoints tcps://0.0.0.0:8044 \
              --advertised-endpoints tcps://splinterd-node-acme:8044 \
              --bind 0.0.0.0:8085 \
              --registries http://registry-server:80/nodes.yaml \
              --tls-insecure
        "

    db-bubba:
      image: splintercommunity/supplychain-database:master
      container_name: db-bubba
      restart: always
      expose:
        - 5432
      ports:
          - "5433:5432"
      environment:
        POSTGRES_USER: supplychain
        POSTGRES_PASSWORD: supplychain_example
        POSTGRES_DB: supplychain
      volumes:
        - "./database/tables:/docker-entrypoint-initdb.d"
        - bubba-db:/var/lib/postgresql/data/

    supplychain-app-bubba:
      image: splintercommunity/supplychain-app-bubba:master
      container_name: supplychain-app-bubba
      environment:
        - VUE_APP_BRAND=bubba
      expose:
        - 80
      ports:
        - '8081:80'

    supplychaind-bubba:
        image: splintercommunity/supplychaind:master
        container_name: supplychaind-bubba
        volumes:
          - cargo-registry:/root/.cargo/registry
        expose:
          - 8000
        ports:
          - "8001:8000"
        depends_on:
          - splinterd-node-bubba
        command: |
          bash -c "
            # we need to wait for the db to have started.
            until PGPASSWORD=supplychain_example psql -h db-bubba -U supplychain -c '\q'; do
                >&2 echo \"Database is unavailable - sleeping\"
                sleep 1
            done

            # check if splinterd-node-bubba is available
            while [[ $$(curl --write-out %{http_code} --silent --output /dev/null http://splinterd-node-bubba:8085/status) -ne 200 ]] ; do
               >&2 echo \"splinterd is unavailable - sleeping\"
               sleep 1
            done

            supplychain -vv database migrate --database-url postgres://supplychain:supplychain_example@db-bubba:5432/supplychain &&
            supplychaind -vv --database-url postgres://supplychain:supplychain_example@db-bubba:5432/supplychain \
              -b supplychaind-bubba:8000 --splinterd-url http://splinterd-node-bubba:8085
          "

    splinterd-node-bubba:
      image: splintercommunity/splinterd:master
      container_name: splinterd-node-bubba
      expose:
        - 8080
        - 8044
        - 8945
        - 8085
      ports:
        - 8089:8085
      volumes:
        - ./splinterd-config:/configs
        - bubba-var:/var/lib/splinter
      entrypoint: |
        bash -c "
          splinter cert generate --skip && \
          splinterd -c ./configs/splinterd-node-bubba.toml -vv \
              --service-endpoint tcp://0.0.0.0:8043 \
              --network-endpoints tcps://0.0.0.0:8044 \
              --advertised-endpoints tcps://splinterd-node-bubba:8044 \
              --bind 0.0.0.0:8085 \
              --registries http://registry-server:80/nodes.yaml \
              --tls-insecure
        "
